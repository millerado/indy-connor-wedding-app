type Events @model @auth(rules: [{allow: public}]) {
  id: ID!
  eventName: String!
  eventPassword: String
  startDate: AWSDate!
  endDate: AWSDate!
  displayStartDate: AWSDate
  displayEndDate: AWSDate
  allowNewActivity: Boolean!
  eventFunctionality: String!
  adminPassword: String
  users: [String]
}

type ScheduledNotifications @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  subject: String!
  linking: String
  messageBody: String!
  scheduleTrigger: String!
  displayTime: AWSDateTime!
}

type Notifications @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  read: Boolean!
  messageBody: String!
  linking: String
  subject: String!
  displayTime: AWSDateTime!
}

type Games @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  iconName: String!
  minNumberOfTeams: Int!
  maxNumberOfTeams: Int
  minNumberOfPlayersPerTeam: Int!
  maxNumberOfPlayersPerTeam: Int
  points: [Int!]
  rules: String
  canHaveMultipleWinners: Boolean!
}

type StandingsPeople @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String
  rank: Int
  points: Int
  gamesPlayed: Int
  lastCalculationTime: AWSDateTime
  Events: Events @hasOne
}

type AdminFavorites @model @auth(rules: [{allow: public}]) {
  id: ID!
  image: String!
  Events: Events @hasOne
}

type StandingsTeams @model @auth(rules: [{allow: public}]) {
  id: ID!
  teamId: String
  rank: Int
  points: Int
  lastCalculationTime: AWSDateTime
  Events: Events @hasOne
}

type Posts @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  messageBody: String
  images: [String]
  olympicEvent: Boolean!
  eventDetails: String
  Comments: [Comments] @hasMany(indexName: "byPosts", fields: ["id"])
  Reactions: [Reactions] @hasMany(indexName: "byPosts", fields: ["id"])
  usersInPost: [String]
  Events: Events @hasOne
}

type Teams @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  Users: [Users] @hasMany(indexName: "byTeams", fields: ["id"])
  iconName: String
  description: String
  Events: Events @hasOne
}

type Users @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  image: String
  about: String
  whereAreYouStaying: String
  teamsID: ID! @index(name: "byTeams")
  admin: Boolean!
  unreadNotifications: Int
}

type ExpoTokens @model @auth(rules: [{allow: public}]) {
  id: ID!
  token: String!
  userId: String
}

type Reactions @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  reactionType: String!
  postsID: ID! @index(name: "byPosts")
  Events: Events @hasOne
}

type Comments @model @auth(rules: [{allow: public}]) {
  id: ID!
  userId: String!
  comment: String!
  postsID: ID! @index(name: "byPosts")
  Events: Events @hasOne
}

type FAQ @model @auth(rules: [{allow: public}]) {
  id: ID!
  question: String!
  answer: String!
  sortOrder: Int!
  Events: Events @hasOne
}

type Schedule @model @auth(rules: [{allow: public}]) {
  id: ID!
  name: String!
  time: String!
  day: String!
  description: String!
  location: String!
  sortOrder: Int!
  Events: Events @hasOne
}
 